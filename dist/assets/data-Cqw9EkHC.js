const m=[{id:1,title:"Website Redesign",description:"Complete overhaul of the company website with modern design and improved UX",taskCount:8,completedTasks:5,dueDate:"2024-02-15",category:"Design",createdAt:"2024-01-01",updatedAt:"2024-01-15"},{id:2,title:"Mobile App Development",description:"Build a cross-platform mobile app for iOS and Android",taskCount:12,completedTasks:2,dueDate:"2024-03-30",category:"Development",createdAt:"2024-01-10",updatedAt:"2024-01-10"},{id:3,title:"Marketing Campaign",description:"Launch Q1 marketing campaign across all channels",taskCount:6,completedTasks:6,dueDate:"2024-01-31",category:"Marketing",createdAt:"2023-12-01",updatedAt:"2024-01-31"}],w=[{id:"1",title:"Complete project proposal",description:"Draft and finalize the Q1 project proposal for client review",status:"todo",priority:"high",dueDate:"2024-01-15",project:"Website Redesign",xpReward:150},{id:"2",title:"Review team submissions",description:"Go through all team member submissions for the quarterly review",status:"inprogress",priority:"medium",dueDate:"2024-01-12",project:"Marketing Campaign",xpReward:100},{id:"3",title:"Update documentation",description:"Update the API documentation with recent changes",status:"complete",priority:"low",dueDate:"2024-01-10",project:"Mobile App Development",xpReward:75}],u="taskmaster_projects",p="taskmaster_tasks",g=(e,t)=>{try{const a=localStorage.getItem(e);return a?JSON.parse(a):t}catch{return t}},c=(e,t)=>{try{localStorage.setItem(e,JSON.stringify(t))}catch(a){console.error("Failed to save to localStorage:",a)}};let o=g(u,m),r=g(p,w);const d={async getAll(){return o},async create(e){const t={...e,id:Date.now(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return o.push(t),c(u,o),t},async update(e,t){const a=o.findIndex(n=>n.id===e);if(a===-1)throw new Error("Project not found");return o[a]={...o[a],...t,updatedAt:new Date().toISOString()},c(u,o),o[a]},async delete(e){o=o.filter(t=>t.id!==e),c(u,o)}},i={async getAll(){return r},async getUpcoming(e=10){const t=new Date;return r.filter(n=>n.status!=="complete").filter(n=>n.dueDate?new Date(n.dueDate)>=t:!0).sort((n,l)=>n.dueDate?l.dueDate?new Date(n.dueDate).getTime()-new Date(l.dueDate).getTime():-1:1).slice(0,e)},async create(e){const t={...e,id:Date.now().toString()};return r.push(t),c(p,r),t},async update(e,t){const a=r.findIndex(n=>n.id===e);if(a===-1)throw new Error("Task not found");return r[a]={...r[a],...t},c(p,r),r[a]},async delete(e){r=r.filter(t=>t.id!==e),c(p,r)},async updateStatus(e,t){return this.update(e,{status:t})}},s=e=>new Promise(t=>setTimeout(t,e)),y={projects:{async getAll(){return await s(300),d.getAll()},async create(e){return await s(500),d.create(e)},async update(e,t){return await s(400),d.update(e,t)},async delete(e){return await s(300),d.delete(e)}},tasks:{async getAll(){return await s(300),i.getAll()},async getUpcoming(e){return await s(300),i.getUpcoming(e)},async create(e){return await s(500),i.create(e)},async update(e,t){return await s(400),i.update(e,t)},async delete(e){return await s(300),i.delete(e)},async updateStatus(e,t){return await s(300),i.updateStatus(e,t)}}};export{y as api,d as projectsAPI,i as tasksAPI};
//# sourceMappingURL=data-Cqw9EkHC.js.map
