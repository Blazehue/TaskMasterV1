{"version":3,"file":"data-Cqw9EkHC.js","sources":["../../src/lib/data.ts"],"sourcesContent":["import { Project, Task } from \"@/types\"\r\n\r\n// Mock data for projects\r\nconst mockProjects: Project[] = [\r\n  {\r\n    id: 1,\r\n    title: \"Website Redesign\",\r\n    description: \"Complete overhaul of the company website with modern design and improved UX\",\r\n    taskCount: 8,\r\n    completedTasks: 5,\r\n    dueDate: \"2024-02-15\",\r\n    category: \"Design\",\r\n    createdAt: \"2024-01-01\",\r\n    updatedAt: \"2024-01-15\"\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Mobile App Development\",\r\n    description: \"Build a cross-platform mobile app for iOS and Android\",\r\n    taskCount: 12,\r\n    completedTasks: 2,\r\n    dueDate: \"2024-03-30\",\r\n    category: \"Development\",\r\n    createdAt: \"2024-01-10\",\r\n    updatedAt: \"2024-01-10\"\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Marketing Campaign\",\r\n    description: \"Launch Q1 marketing campaign across all channels\",\r\n    taskCount: 6,\r\n    completedTasks: 6,\r\n    dueDate: \"2024-01-31\",\r\n    category: \"Marketing\",\r\n    createdAt: \"2023-12-01\",\r\n    updatedAt: \"2024-01-31\"\r\n  }\r\n]\r\n\r\n// Mock data for tasks\r\nconst mockTasks: Task[] = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Complete project proposal\",\r\n    description: \"Draft and finalize the Q1 project proposal for client review\",\r\n    status: \"todo\",\r\n    priority: \"high\",\r\n    dueDate: \"2024-01-15\",\r\n    project: \"Website Redesign\",\r\n    xpReward: 150\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Review team submissions\",\r\n    description: \"Go through all team member submissions for the quarterly review\",\r\n    status: \"inprogress\",\r\n    priority: \"medium\",\r\n    dueDate: \"2024-01-12\",\r\n    project: \"Marketing Campaign\",\r\n    xpReward: 100\r\n  },\r\n  {\r\n    id: \"3\",\r\n    title: \"Update documentation\",\r\n    description: \"Update the API documentation with recent changes\",\r\n    status: \"complete\",\r\n    priority: \"low\",\r\n    dueDate: \"2024-01-10\",\r\n    project: \"Mobile App Development\",\r\n    xpReward: 75\r\n  }\r\n]\r\n\r\n// Local storage keys\r\nconst PROJECTS_KEY = 'taskmaster_projects'\r\nconst TASKS_KEY = 'taskmaster_tasks'\r\n\r\n// Helper functions for localStorage\r\nconst getFromStorage = <T>(key: string, defaultValue: T): T => {\r\n  try {\r\n    const item = localStorage.getItem(key)\r\n    return item ? JSON.parse(item) : defaultValue\r\n  } catch {\r\n    return defaultValue\r\n  }\r\n}\r\n\r\nconst setToStorage = <T>(key: string, value: T): void => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n  } catch (error) {\r\n    console.error('Failed to save to localStorage:', error)\r\n  }\r\n}\r\n\r\n// Initialize data from localStorage or use mock data\r\nlet projects: Project[] = getFromStorage(PROJECTS_KEY, mockProjects)\r\nlet tasks: Task[] = getFromStorage(TASKS_KEY, mockTasks)\r\n\r\n// Projects API\r\nexport const projectsAPI = {\r\n  async getAll(): Promise<Project[]> {\r\n    return projects\r\n  },\r\n\r\n  async create(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): Promise<Project> {\r\n    const newProject: Project = {\r\n      ...project,\r\n      id: Date.now(),\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    }\r\n    projects.push(newProject)\r\n    setToStorage(PROJECTS_KEY, projects)\r\n    return newProject\r\n  },\r\n\r\n  async update(id: number, updates: Partial<Project>): Promise<Project> {\r\n    const index = projects.findIndex(p => p.id === id)\r\n    if (index === -1) {\r\n      throw new Error('Project not found')\r\n    }\r\n    \r\n    projects[index] = {\r\n      ...projects[index],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString()\r\n    }\r\n    setToStorage(PROJECTS_KEY, projects)\r\n    return projects[index]\r\n  },\r\n\r\n  async delete(id: number): Promise<void> {\r\n    projects = projects.filter(p => p.id !== id)\r\n    setToStorage(PROJECTS_KEY, projects)\r\n  }\r\n}\r\n\r\n// Tasks API\r\nexport const tasksAPI = {\r\n  async getAll(): Promise<Task[]> {\r\n    return tasks\r\n  },\r\n\r\n  async getUpcoming(limit: number = 10): Promise<Task[]> {\r\n    const now = new Date()\r\n    const upcoming = tasks\r\n      .filter(task => task.status !== 'complete')\r\n      .filter(task => {\r\n        if (!task.dueDate) return true\r\n        const dueDate = new Date(task.dueDate)\r\n        return dueDate >= now\r\n      })\r\n      .sort((a, b) => {\r\n        if (!a.dueDate) return 1\r\n        if (!b.dueDate) return -1\r\n        return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()\r\n      })\r\n      .slice(0, limit)\r\n    \r\n    return upcoming\r\n  },\r\n\r\n  async create(task: Omit<Task, 'id'>): Promise<Task> {\r\n    const newTask: Task = {\r\n      ...task,\r\n      id: Date.now().toString()\r\n    }\r\n    tasks.push(newTask)\r\n    setToStorage(TASKS_KEY, tasks)\r\n    return newTask\r\n  },\r\n\r\n  async update(id: string, updates: Partial<Task>): Promise<Task> {\r\n    const index = tasks.findIndex(t => t.id === id)\r\n    if (index === -1) {\r\n      throw new Error('Task not found')\r\n    }\r\n    \r\n    tasks[index] = {\r\n      ...tasks[index],\r\n      ...updates\r\n    }\r\n    setToStorage(TASKS_KEY, tasks)\r\n    return tasks[index]\r\n  },\r\n\r\n  async delete(id: string): Promise<void> {\r\n    tasks = tasks.filter(t => t.id !== id)\r\n    setToStorage(TASKS_KEY, tasks)\r\n  },\r\n\r\n  async updateStatus(id: string, status: Task['status']): Promise<Task> {\r\n    return this.update(id, { status })\r\n  }\r\n}\r\n\r\n// Mock delay to simulate API calls\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// Wrapper functions that simulate API behavior\r\nexport const api = {\r\n  projects: {\r\n    async getAll() {\r\n      await delay(300) // Simulate network delay\r\n      return projectsAPI.getAll()\r\n    },\r\n    async create(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>) {\r\n      await delay(500)\r\n      return projectsAPI.create(project)\r\n    },\r\n    async update(id: number, updates: Partial<Project>) {\r\n      await delay(400)\r\n      return projectsAPI.update(id, updates)\r\n    },\r\n    async delete(id: number) {\r\n      await delay(300)\r\n      return projectsAPI.delete(id)\r\n    }\r\n  },\r\n  tasks: {\r\n    async getAll() {\r\n      await delay(300)\r\n      return tasksAPI.getAll()\r\n    },\r\n    async getUpcoming(limit?: number) {\r\n      await delay(300)\r\n      return tasksAPI.getUpcoming(limit)\r\n    },\r\n    async create(task: Omit<Task, 'id'>) {\r\n      await delay(500)\r\n      return tasksAPI.create(task)\r\n    },\r\n    async update(id: string, updates: Partial<Task>) {\r\n      await delay(400)\r\n      return tasksAPI.update(id, updates)\r\n    },\r\n    async delete(id: string) {\r\n      await delay(300)\r\n      return tasksAPI.delete(id)\r\n    },\r\n    async updateStatus(id: string, status: Task['status']) {\r\n      await delay(300)\r\n      return tasksAPI.updateStatus(id, status)\r\n    }\r\n  }\r\n}\r\n"],"names":["mockProjects","mockTasks","PROJECTS_KEY","TASKS_KEY","getFromStorage","key","defaultValue","item","setToStorage","value","error","projects","tasks","projectsAPI","project","newProject","id","updates","index","p","tasksAPI","limit","now","task","a","b","newTask","t","status","delay","ms","resolve","api"],"mappings":"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"}